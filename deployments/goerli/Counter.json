{
  "address": "0x19ECFd884107EE28b7d5A3cC24796c2389961603",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        }
      ],
      "name": "incrementCounter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ad9954da44d8132578516509d4570984f1f4072fbcffc8d52b686828905a707",
  "receipt": {
    "to": null,
    "from": "0x082DaA07AF2609771aA35211BC5739B16f18b93f",
    "contractAddress": "0x19ECFd884107EE28b7d5A3cC24796c2389961603",
    "transactionIndex": 29,
    "gasUsed": "2976039",
    "logsBloom": "0x
    "blockHash": "0xcb3e9e0b4773f22347d8d4c7948073aa43caa7fae5addfadbe53d04f3bf97cb9",
    "transactionHash": "0x8ad9954da44d8132578516509d4570984f1f4072fbcffc8d52b686828905a707",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 9078354,
        "transactionHash": "0x8ad9954da44d8132578516509d4570984f1f4072fbcffc8d52b686828905a707",
        "address": "0x19ECFd884107EE28b7d5A3cC24796c2389961603",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000082daa07af2609771aa35211bc5739b16f18b93f"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0xcb3e9e0b4773f22347d8d4c7948073aa43caa7fae5addfadbe53d04f3bf97cb9"
      }
    ],
    "blockNumber": 9078354,
    "cumulativeGasUsed": "6136562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbfD2135BFfbb0B5378b56643c2Df8a87552Bfa23"
  ],
  "numDeployments": 1,
  "solcInputHash": "bc4e0cf4c264fbe9cd5e4b7645396402",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Counter.sol\":\"Counter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Counter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\nimport \\\"../node_modules/@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\\\";\\n\\ncontract Counter is NonblockingLzApp{\\n   uint public counter;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory) internal override {\\n        counter += 1;\\n    }\\n\\n    function incrementCounter(uint16 _dstChainId) public payable {\\n        _lzSend(_dstChainId, bytes(\\\"\\\"), payable(msg.sender), address(0x0), bytes(\\\"\\\"), msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x41cd30ba43a483f0ac15e3bfc9edc89f87a0f0f615bb448ddb3179a7b1512ff4\",\"license\":\"UNLICENSED\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf7a97c79e0670912e51cfe74a06bf049718640ac764706250a903a63fec6e0b6\",\"license\":\"MIT\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"node_modules/@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620036c2380380620036c28339818101604052810190620000379190620001cc565b8080620000596200004d6200009660201b60201c565b6200009e60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505050620001fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001948262000167565b9050919050565b620001a68162000187565b8114620001b257600080fd5b50565b600081519050620001c6816200019b565b92915050565b600060208284031215620001e557620001e462000162565b5b6000620001f584828501620001b5565b91505092915050565b6080516134776200024b6000396000818161065f015281816108bd0152818161097f01528181610b0101528181610ff9015281816110ae01528181611547015261192201526134776000f3fe60806040526004361061019b5760003560e01c80638da5cb5b116100ec578063c44618341161008a578063df2a5b3b11610064578063df2a5b3b146105a5578063eb8d72b7146105ce578063f2fde38b146105f7578063f5ecbdbc146106205761019b565b8063c446183414610535578063cbed8b9c14610560578063d1deba1f146105895761019b565b80639f38369a116100c65780639f38369a1461047b578063a6c3d165146104b8578063b353aaa7146104e1578063baf3292d1461050c5761019b565b80638da5cb5b14610409578063950c8a74146104345780639917565c1461045f5761019b565b806342d65a8d1161015957806366ad5c8a1161013357806366ad5c8a1461034f578063715018a6146103785780637533d7881461038f5780638cfd8f5c146103cc5761019b565b806342d65a8d146102be5780635b8c41e6146102e757806361bc221a146103245761019b565b80621d3567146101a057806307e0db17146101c95780630df37483146101f257806310ddb1371461021b5780633d8b38f6146102445780633f1f4fa414610281575b600080fd5b3480156101ac57600080fd5b506101c760048036038101906101c29190611d8c565b61065d565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190611e33565b6108b3565b005b3480156101fe57600080fd5b5061021960048036038101906102149190611e96565b610949565b005b34801561022757600080fd5b50610242600480360381019061023d9190611e33565b610975565b005b34801561025057600080fd5b5061026b60048036038101906102669190611ed6565b610a0b565b6040516102789190611f51565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a39190611e33565b610adf565b6040516102b59190611f7b565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190611ed6565b610af7565b005b3480156102f357600080fd5b5061030e600480360381019061030991906120d7565b610b93565b60405161031b919061215f565b60405180910390f35b34801561033057600080fd5b50610339610bdb565b6040516103469190611f7b565b60405180910390f35b34801561035b57600080fd5b5061037660048036038101906103719190611d8c565b610be1565b005b34801561038457600080fd5b5061038d610cf2565b005b34801561039b57600080fd5b506103b660048036038101906103b19190611e33565b610d06565b6040516103c391906121f9565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee919061221b565b610da6565b6040516104009190611f7b565b60405180910390f35b34801561041557600080fd5b5061041e610dcb565b60405161042b919061229c565b60405180910390f35b34801561044057600080fd5b50610449610df4565b604051610456919061229c565b60405180910390f35b61047960048036038101906104749190611e33565b610e1a565b005b34801561048757600080fd5b506104a2600480360381019061049d9190611e33565b610e4a565b6040516104af91906121f9565b60405180910390f35b3480156104c457600080fd5b506104df60048036038101906104da9190611ed6565b610f63565b005b3480156104ed57600080fd5b506104f6610ff7565b6040516105039190612316565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e919061235d565b61101b565b005b34801561054157600080fd5b5061054a61109e565b6040516105579190611f7b565b60405180910390f35b34801561056c57600080fd5b506105876004803603810190610582919061238a565b6110a4565b005b6105a3600480360381019061059e9190611d8c565b611146565b005b3480156105b157600080fd5b506105cc60048036038101906105c79190612412565b611389565b005b3480156105da57600080fd5b506105f560048036038101906105f09190611ed6565b61144d565b005b34801561060357600080fd5b5061061e6004803603810190610619919061235d565b6114c0565b005b34801561062c57600080fd5b5061064760048036038101906106429190612465565b611543565b60405161065491906121f9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661069c6115f4565b73ffffffffffffffffffffffffffffffffffffffff16146106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990612529565b60405180910390fd5b6000600160008861ffff1661ffff168152602001908152602001600020805461071a90612578565b80601f016020809104026020016040519081016040528092919081815260200182805461074690612578565b80156107935780601f1061076857610100808354040283529160200191610793565b820191906000526020600020905b81548152906001019060200180831161077657829003601f168201915b505050505090508051868690501480156107ae575060008151115b80156107d75750808051906020012086866040516107cd9291906125d9565b6040518091039020145b610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d90612664565b60405180910390fd5b6108aa8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506115fc565b50505050505050565b6108bb6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b81526004016109149190612693565b600060405180830381600087803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b5050505050565b6109516116c7565b80600360008461ffff1661ffff168152602001908152602001600020819055505050565b61097d6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016109d69190612693565b600060405180830381600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b5050505050565b600080600160008661ffff1661ffff1681526020019081526020016000208054610a3490612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6090612578565b8015610aad5780601f10610a8257610100808354040283529160200191610aad565b820191906000526020600020905b815481529060010190602001808311610a9057829003601f168201915b505050505090508383604051610ac49291906125d9565b60405180910390208180519060200120149150509392505050565b60036020528060005260406000206000915090505481565b610aff6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b8152600401610b5c939291906126db565b600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b50505050505050565b60056020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050505481565b60065481565b3073ffffffffffffffffffffffffffffffffffffffff16610c006115f4565b73ffffffffffffffffffffffffffffffffffffffff1614610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d9061277f565b60405180910390fd5b610cea8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611745565b505050505050565b610cfa6116c7565b610d046000611765565b565b60016020528060005260406000206000915090508054610d2590612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5190612578565b8015610d9e5780601f10610d7357610100808354040283529160200191610d9e565b820191906000526020600020905b815481529060010190602001808311610d8157829003601f168201915b505050505081565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e4781604051806020016040528060008152503360006040518060200160405280600081525034611829565b50565b60606000600160008461ffff1661ffff1681526020019081526020016000208054610e7490612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea090612578565b8015610eed5780601f10610ec257610100808354040283529160200191610eed565b820191906000526020600020905b815481529060010190602001808311610ed057829003601f168201915b505050505090506000815103610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f906127eb565b60405180910390fd5b610f5b600060148351610f4b919061283a565b836119bf9092919063ffffffff16565b915050919050565b610f6b6116c7565b818130604051602001610f80939291906128b6565b604051602081830303815290604052600160008561ffff1661ffff1681526020019081526020016000209081610fb69190612a82565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610fea939291906126db565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6110236116c7565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b81604051611093919061229c565b60405180910390a150565b61271081565b6110ac6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c86868686866040518663ffffffff1660e01b815260040161110d959493929190612b54565b600060405180830381600087803b15801561112757600080fd5b505af115801561113b573d6000803e3d6000fd5b505050505050505050565b6000600560008861ffff1661ffff16815260200190815260200160002086866040516111739291906125d9565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b81036111ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e590612c14565b60405180910390fd5b8083836040516111ff9291906125d9565b604051809103902014611247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123e90612ca6565b60405180910390fd5b6000801b600560008961ffff1661ffff16815260200190815260200160002087876040516112769291906125d9565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055506113418787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611745565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051611378959493929190612cd5565b60405180910390a150505050505050565b6113916116c7565b600081116113d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cb90612d6f565b60405180910390fd5b80600260008561ffff1661ffff16815260200190815260200160002060008461ffff1661ffff168152602001908152602001600020819055507f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac083838360405161144093929190612d8f565b60405180910390a1505050565b6114556116c7565b8181600160008661ffff1661ffff168152602001908152602001600020918261147f929190612dd1565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516114b3939291906126db565b60405180910390a1505050565b6114c86116c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e90612f13565b60405180910390fd5b61154081611765565b50565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc868630866040518563ffffffff1660e01b81526004016115a49493929190612f33565b600060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115ea9190612fe8565b9050949350505050565b600033905090565b6000806116a85a60966366ad5c8a60e01b898989896040516024016116249493929190613031565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff16611add909392919063ffffffff16565b91509150816116bf576116be8686868685611b75565b5b505050505050565b6116cf6115f4565b73ffffffffffffffffffffffffffffffffffffffff166116ed610dcb565b73ffffffffffffffffffffffffffffffffffffffff1614611743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173a906130d0565b60405180910390fd5b565b60016006600082825461175891906130f0565b9250508190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160008861ffff1661ffff168152602001908152602001600020805461185190612578565b80601f016020809104026020016040519081016040528092919081815260200182805461187d90612578565b80156118ca5780601f1061189f576101008083540402835291602001916118ca565b820191906000526020600020905b8154815290600101906020018083116118ad57829003601f168201915b505050505090506000815103611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190c90613196565b60405180910390fd5b611920878751611c23565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031008389848a8a8a8a6040518863ffffffff1660e01b8152600401611984969594939291906131d7565b6000604051808303818588803b15801561199d57600080fd5b505af11580156119b1573d6000803e3d6000fd5b505050505050505050505050565b606081601f836119cf91906130f0565b1015611a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0790613299565b60405180910390fd5b8183611a1c91906130f0565b84511015611a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5690613305565b60405180910390fd5b6060821560008114611a805760405191506000825260208201604052611ad1565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611abe5780518352602083019250602081019050611aa1565b50868552601f19601f8301166040525050505b50809150509392505050565b6000606060008060008661ffff1667ffffffffffffffff811115611b0457611b03611fac565b5b6040519080825280601f01601f191660200182016040528015611b365781602001600182028036833780820191505090505b50905060008087516020890160008d8df191503d925086831115611b58578692505b828152826000602083013e81819450945050505094509492505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051611ba69190613356565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c8585858585604051611c1495949392919061336d565b60405180910390a15050505050565b6000600360008461ffff1661ffff16815260200190815260200160002054905060008103611c515761271090505b80821115611c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8b90613421565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b611cc481611cad565b8114611ccf57600080fd5b50565b600081359050611ce181611cbb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d0c57611d0b611ce7565b5b8235905067ffffffffffffffff811115611d2957611d28611cec565b5b602083019150836001820283011115611d4557611d44611cf1565b5b9250929050565b600067ffffffffffffffff82169050919050565b611d6981611d4c565b8114611d7457600080fd5b50565b600081359050611d8681611d60565b92915050565b60008060008060008060808789031215611da957611da8611ca3565b5b6000611db789828a01611cd2565b965050602087013567ffffffffffffffff811115611dd857611dd7611ca8565b5b611de489828a01611cf6565b95509550506040611df789828a01611d77565b935050606087013567ffffffffffffffff811115611e1857611e17611ca8565b5b611e2489828a01611cf6565b92509250509295509295509295565b600060208284031215611e4957611e48611ca3565b5b6000611e5784828501611cd2565b91505092915050565b6000819050919050565b611e7381611e60565b8114611e7e57600080fd5b50565b600081359050611e9081611e6a565b92915050565b60008060408385031215611ead57611eac611ca3565b5b6000611ebb85828601611cd2565b9250506020611ecc85828601611e81565b9150509250929050565b600080600060408486031215611eef57611eee611ca3565b5b6000611efd86828701611cd2565b935050602084013567ffffffffffffffff811115611f1e57611f1d611ca8565b5b611f2a86828701611cf6565b92509250509250925092565b60008115159050919050565b611f4b81611f36565b82525050565b6000602082019050611f666000830184611f42565b92915050565b611f7581611e60565b82525050565b6000602082019050611f906000830184611f6c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fe482611f9b565b810181811067ffffffffffffffff8211171561200357612002611fac565b5b80604052505050565b6000612016611c99565b90506120228282611fdb565b919050565b600067ffffffffffffffff82111561204257612041611fac565b5b61204b82611f9b565b9050602081019050919050565b82818337600083830152505050565b600061207a61207584612027565b61200c565b90508281526020810184848401111561209657612095611f96565b5b6120a1848285612058565b509392505050565b600082601f8301126120be576120bd611ce7565b5b81356120ce848260208601612067565b91505092915050565b6000806000606084860312156120f0576120ef611ca3565b5b60006120fe86828701611cd2565b935050602084013567ffffffffffffffff81111561211f5761211e611ca8565b5b61212b868287016120a9565b925050604061213c86828701611d77565b9150509250925092565b6000819050919050565b61215981612146565b82525050565b60006020820190506121746000830184612150565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121b4578082015181840152602081019050612199565b60008484015250505050565b60006121cb8261217a565b6121d58185612185565b93506121e5818560208601612196565b6121ee81611f9b565b840191505092915050565b6000602082019050818103600083015261221381846121c0565b905092915050565b6000806040838503121561223257612231611ca3565b5b600061224085828601611cd2565b925050602061225185828601611cd2565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122868261225b565b9050919050565b6122968161227b565b82525050565b60006020820190506122b1600083018461228d565b92915050565b6000819050919050565b60006122dc6122d76122d28461225b565b6122b7565b61225b565b9050919050565b60006122ee826122c1565b9050919050565b6000612300826122e3565b9050919050565b612310816122f5565b82525050565b600060208201905061232b6000830184612307565b92915050565b61233a8161227b565b811461234557600080fd5b50565b60008135905061235781612331565b92915050565b60006020828403121561237357612372611ca3565b5b600061238184828501612348565b91505092915050565b6000806000806000608086880312156123a6576123a5611ca3565b5b60006123b488828901611cd2565b95505060206123c588828901611cd2565b94505060406123d688828901611e81565b935050606086013567ffffffffffffffff8111156123f7576123f6611ca8565b5b61240388828901611cf6565b92509250509295509295909350565b60008060006060848603121561242b5761242a611ca3565b5b600061243986828701611cd2565b935050602061244a86828701611cd2565b925050604061245b86828701611e81565b9150509250925092565b6000806000806080858703121561247f5761247e611ca3565b5b600061248d87828801611cd2565b945050602061249e87828801611cd2565b93505060406124af87828801612348565b92505060606124c087828801611e81565b91505092959194509250565b600082825260208201905092915050565b7f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000600082015250565b6000612513601e836124cc565b915061251e826124dd565b602082019050919050565b6000602082019050818103600083015261254281612506565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061259057607f821691505b6020821081036125a3576125a2612549565b5b50919050565b600081905092915050565b60006125c083856125a9565b93506125cd838584612058565b82840190509392505050565b60006125e68284866125b4565b91508190509392505050565b7f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061264e6026836124cc565b9150612659826125f2565b604082019050919050565b6000602082019050818103600083015261267d81612641565b9050919050565b61268d81611cad565b82525050565b60006020820190506126a86000830184612684565b92915050565b60006126ba8385612185565b93506126c7838584612058565b6126d083611f9b565b840190509392505050565b60006040820190506126f06000830186612684565b81810360208301526127038184866126ae565b9050949350505050565b7f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201527f204c7a4170700000000000000000000000000000000000000000000000000000602082015250565b60006127696026836124cc565b91506127748261270d565b604082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000600082015250565b60006127d5601d836124cc565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061284582611e60565b915061285083611e60565b92508282039050818111156128685761286761280b565b5b92915050565b60008160601b9050919050565b60006128868261286e565b9050919050565b60006128988261287b565b9050919050565b6128b06128ab8261227b565b61288d565b82525050565b60006128c38285876125b4565b91506128cf828461289f565b601482019150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612905565b61294c8683612905565b95508019841693508086168417925050509392505050565b600061297f61297a61297584611e60565b6122b7565b611e60565b9050919050565b6000819050919050565b61299983612964565b6129ad6129a582612986565b848454612912565b825550505050565b600090565b6129c26129b5565b6129cd818484612990565b505050565b5b818110156129f1576129e66000826129ba565b6001810190506129d3565b5050565b601f821115612a3657612a07816128e0565b612a10846128f5565b81016020851015612a1f578190505b612a33612a2b856128f5565b8301826129d2565b50505b505050565b600082821c905092915050565b6000612a5960001984600802612a3b565b1980831691505092915050565b6000612a728383612a48565b9150826002028217905092915050565b612a8b8261217a565b67ffffffffffffffff811115612aa457612aa3611fac565b5b612aae8254612578565b612ab98282856129f5565b600060209050601f831160018114612aec5760008415612ada578287015190505b612ae48582612a66565b865550612b4c565b601f198416612afa866128e0565b60005b82811015612b2257848901518255600182019150602085019450602081019050612afd565b86831015612b3f5784890151612b3b601f891682612a48565b8355505b6001600288020188555050505b505050505050565b6000608082019050612b696000830188612684565b612b766020830187612684565b612b836040830186611f6c565b8181036060830152612b968184866126ae565b90509695505050505050565b7f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201527f6167650000000000000000000000000000000000000000000000000000000000602082015250565b6000612bfe6023836124cc565b9150612c0982612ba2565b604082019050919050565b60006020820190508181036000830152612c2d81612bf1565b9050919050565b7f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c906021836124cc565b9150612c9b82612c34565b604082019050919050565b60006020820190508181036000830152612cbf81612c83565b9050919050565b612ccf81611d4c565b82525050565b6000608082019050612cea6000830188612684565b8181036020830152612cfd8186886126ae565b9050612d0c6040830185612cc6565b612d196060830184612150565b9695505050505050565b7f4c7a4170703a20696e76616c6964206d696e4761730000000000000000000000600082015250565b6000612d596015836124cc565b9150612d6482612d23565b602082019050919050565b60006020820190508181036000830152612d8881612d4c565b9050919050565b6000606082019050612da46000830186612684565b612db16020830185612684565b612dbe6040830184611f6c565b949350505050565b600082905092915050565b612ddb8383612dc6565b67ffffffffffffffff811115612df457612df3611fac565b5b612dfe8254612578565b612e098282856129f5565b6000601f831160018114612e385760008415612e26578287013590505b612e308582612a66565b865550612e98565b601f198416612e46866128e0565b60005b82811015612e6e57848901358255600182019150602085019450602081019050612e49565b86831015612e8b5784890135612e87601f891682612a48565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612efd6026836124cc565b9150612f0882612ea1565b604082019050919050565b60006020820190508181036000830152612f2c81612ef0565b9050919050565b6000608082019050612f486000830187612684565b612f556020830186612684565b612f62604083018561228d565b612f6f6060830184611f6c565b95945050505050565b6000612f8b612f8684612027565b61200c565b905082815260208101848484011115612fa757612fa6611f96565b5b612fb2848285612196565b509392505050565b600082601f830112612fcf57612fce611ce7565b5b8151612fdf848260208601612f78565b91505092915050565b600060208284031215612ffe57612ffd611ca3565b5b600082015167ffffffffffffffff81111561301c5761301b611ca8565b5b61302884828501612fba565b91505092915050565b60006080820190506130466000830187612684565b818103602083015261305881866121c0565b90506130676040830185612cc6565b818103606083015261307981846121c0565b905095945050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130ba6020836124cc565b91506130c582613084565b602082019050919050565b600060208201905081810360008301526130e9816130ad565b9050919050565b60006130fb82611e60565b915061310683611e60565b925082820190508082111561311e5761311d61280b565b5b92915050565b7f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060008201527f61207472757374656420736f7572636500000000000000000000000000000000602082015250565b60006131806030836124cc565b915061318b82613124565b604082019050919050565b600060208201905081810360008301526131af81613173565b9050919050565b60006131c18261225b565b9050919050565b6131d1816131b6565b82525050565b600060c0820190506131ec6000830189612684565b81810360208301526131fe81886121c0565b9050818103604083015261321281876121c0565b905061322160608301866131c8565b61322e608083018561228d565b81810360a083015261324081846121c0565b9050979650505050505050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000613283600e836124cc565b915061328e8261324d565b602082019050919050565b600060208201905081810360008301526132b281613276565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b60006132ef6011836124cc565b91506132fa826132b9565b602082019050919050565b6000602082019050818103600083015261331e816132e2565b9050919050565b60006133308261217a565b61333a81856125a9565b935061334a818560208601612196565b80840191505092915050565b60006133628284613325565b915081905092915050565b600060a0820190506133826000830188612684565b818103602083015261339481876121c0565b90506133a36040830186612cc6565b81810360608301526133b581856121c0565b905081810360808301526133c981846121c0565b90509695505050505050565b7f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765600082015250565b600061340b6020836124cc565b9150613416826133d5565b602082019050919050565b6000602082019050818103600083015261343a816133fe565b905091905056fea26469706673582212205b7287942069abd10096c43aeffb19b007dd968e4fb13b40f88ab8cf4ee1d1cb64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061019b5760003560e01c80638da5cb5b116100ec578063c44618341161008a578063df2a5b3b11610064578063df2a5b3b146105a5578063eb8d72b7146105ce578063f2fde38b146105f7578063f5ecbdbc146106205761019b565b8063c446183414610535578063cbed8b9c14610560578063d1deba1f146105895761019b565b80639f38369a116100c65780639f38369a1461047b578063a6c3d165146104b8578063b353aaa7146104e1578063baf3292d1461050c5761019b565b80638da5cb5b14610409578063950c8a74146104345780639917565c1461045f5761019b565b806342d65a8d1161015957806366ad5c8a1161013357806366ad5c8a1461034f578063715018a6146103785780637533d7881461038f5780638cfd8f5c146103cc5761019b565b806342d65a8d146102be5780635b8c41e6146102e757806361bc221a146103245761019b565b80621d3567146101a057806307e0db17146101c95780630df37483146101f257806310ddb1371461021b5780633d8b38f6146102445780633f1f4fa414610281575b600080fd5b3480156101ac57600080fd5b506101c760048036038101906101c29190611d8c565b61065d565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190611e33565b6108b3565b005b3480156101fe57600080fd5b5061021960048036038101906102149190611e96565b610949565b005b34801561022757600080fd5b50610242600480360381019061023d9190611e33565b610975565b005b34801561025057600080fd5b5061026b60048036038101906102669190611ed6565b610a0b565b6040516102789190611f51565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a39190611e33565b610adf565b6040516102b59190611f7b565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190611ed6565b610af7565b005b3480156102f357600080fd5b5061030e600480360381019061030991906120d7565b610b93565b60405161031b919061215f565b60405180910390f35b34801561033057600080fd5b50610339610bdb565b6040516103469190611f7b565b60405180910390f35b34801561035b57600080fd5b5061037660048036038101906103719190611d8c565b610be1565b005b34801561038457600080fd5b5061038d610cf2565b005b34801561039b57600080fd5b506103b660048036038101906103b19190611e33565b610d06565b6040516103c391906121f9565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee919061221b565b610da6565b6040516104009190611f7b565b60405180910390f35b34801561041557600080fd5b5061041e610dcb565b60405161042b919061229c565b60405180910390f35b34801561044057600080fd5b50610449610df4565b604051610456919061229c565b60405180910390f35b61047960048036038101906104749190611e33565b610e1a565b005b34801561048757600080fd5b506104a2600480360381019061049d9190611e33565b610e4a565b6040516104af91906121f9565b60405180910390f35b3480156104c457600080fd5b506104df60048036038101906104da9190611ed6565b610f63565b005b3480156104ed57600080fd5b506104f6610ff7565b6040516105039190612316565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e919061235d565b61101b565b005b34801561054157600080fd5b5061054a61109e565b6040516105579190611f7b565b60405180910390f35b34801561056c57600080fd5b506105876004803603810190610582919061238a565b6110a4565b005b6105a3600480360381019061059e9190611d8c565b611146565b005b3480156105b157600080fd5b506105cc60048036038101906105c79190612412565b611389565b005b3480156105da57600080fd5b506105f560048036038101906105f09190611ed6565b61144d565b005b34801561060357600080fd5b5061061e6004803603810190610619919061235d565b6114c0565b005b34801561062c57600080fd5b5061064760048036038101906106429190612465565b611543565b60405161065491906121f9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661069c6115f4565b73ffffffffffffffffffffffffffffffffffffffff16146106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e990612529565b60405180910390fd5b6000600160008861ffff1661ffff168152602001908152602001600020805461071a90612578565b80601f016020809104026020016040519081016040528092919081815260200182805461074690612578565b80156107935780601f1061076857610100808354040283529160200191610793565b820191906000526020600020905b81548152906001019060200180831161077657829003601f168201915b505050505090508051868690501480156107ae575060008151115b80156107d75750808051906020012086866040516107cd9291906125d9565b6040518091039020145b610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d90612664565b60405180910390fd5b6108aa8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506115fc565b50505050505050565b6108bb6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b81526004016109149190612693565b600060405180830381600087803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b5050505050565b6109516116c7565b80600360008461ffff1661ffff168152602001908152602001600020819055505050565b61097d6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016109d69190612693565b600060405180830381600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b5050505050565b600080600160008661ffff1661ffff1681526020019081526020016000208054610a3490612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6090612578565b8015610aad5780601f10610a8257610100808354040283529160200191610aad565b820191906000526020600020905b815481529060010190602001808311610a9057829003601f168201915b505050505090508383604051610ac49291906125d9565b60405180910390208180519060200120149150509392505050565b60036020528060005260406000206000915090505481565b610aff6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b8152600401610b5c939291906126db565b600060405180830381600087803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b50505050505050565b60056020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050505481565b60065481565b3073ffffffffffffffffffffffffffffffffffffffff16610c006115f4565b73ffffffffffffffffffffffffffffffffffffffff1614610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d9061277f565b60405180910390fd5b610cea8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611745565b505050505050565b610cfa6116c7565b610d046000611765565b565b60016020528060005260406000206000915090508054610d2590612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5190612578565b8015610d9e5780601f10610d7357610100808354040283529160200191610d9e565b820191906000526020600020905b815481529060010190602001808311610d8157829003601f168201915b505050505081565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e4781604051806020016040528060008152503360006040518060200160405280600081525034611829565b50565b60606000600160008461ffff1661ffff1681526020019081526020016000208054610e7490612578565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea090612578565b8015610eed5780601f10610ec257610100808354040283529160200191610eed565b820191906000526020600020905b815481529060010190602001808311610ed057829003601f168201915b505050505090506000815103610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f906127eb565b60405180910390fd5b610f5b600060148351610f4b919061283a565b836119bf9092919063ffffffff16565b915050919050565b610f6b6116c7565b818130604051602001610f80939291906128b6565b604051602081830303815290604052600160008561ffff1661ffff1681526020019081526020016000209081610fb69190612a82565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610fea939291906126db565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6110236116c7565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b81604051611093919061229c565b60405180910390a150565b61271081565b6110ac6116c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c86868686866040518663ffffffff1660e01b815260040161110d959493929190612b54565b600060405180830381600087803b15801561112757600080fd5b505af115801561113b573d6000803e3d6000fd5b505050505050505050565b6000600560008861ffff1661ffff16815260200190815260200160002086866040516111739291906125d9565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b81036111ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e590612c14565b60405180910390fd5b8083836040516111ff9291906125d9565b604051809103902014611247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123e90612ca6565b60405180910390fd5b6000801b600560008961ffff1661ffff16815260200190815260200160002087876040516112769291906125d9565b908152602001604051809103902060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055506113418787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611745565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051611378959493929190612cd5565b60405180910390a150505050505050565b6113916116c7565b600081116113d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cb90612d6f565b60405180910390fd5b80600260008561ffff1661ffff16815260200190815260200160002060008461ffff1661ffff168152602001908152602001600020819055507f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac083838360405161144093929190612d8f565b60405180910390a1505050565b6114556116c7565b8181600160008661ffff1661ffff168152602001908152602001600020918261147f929190612dd1565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516114b3939291906126db565b60405180910390a1505050565b6114c86116c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e90612f13565b60405180910390fd5b61154081611765565b50565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc868630866040518563ffffffff1660e01b81526004016115a49493929190612f33565b600060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906115ea9190612fe8565b9050949350505050565b600033905090565b6000806116a85a60966366ad5c8a60e01b898989896040516024016116249493929190613031565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff16611add909392919063ffffffff16565b91509150816116bf576116be8686868685611b75565b5b505050505050565b6116cf6115f4565b73ffffffffffffffffffffffffffffffffffffffff166116ed610dcb565b73ffffffffffffffffffffffffffffffffffffffff1614611743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173a906130d0565b60405180910390fd5b565b60016006600082825461175891906130f0565b9250508190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160008861ffff1661ffff168152602001908152602001600020805461185190612578565b80601f016020809104026020016040519081016040528092919081815260200182805461187d90612578565b80156118ca5780601f1061189f576101008083540402835291602001916118ca565b820191906000526020600020905b8154815290600101906020018083116118ad57829003601f168201915b505050505090506000815103611915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190c90613196565b60405180910390fd5b611920878751611c23565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031008389848a8a8a8a6040518863ffffffff1660e01b8152600401611984969594939291906131d7565b6000604051808303818588803b15801561199d57600080fd5b505af11580156119b1573d6000803e3d6000fd5b505050505050505050505050565b606081601f836119cf91906130f0565b1015611a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0790613299565b60405180910390fd5b8183611a1c91906130f0565b84511015611a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5690613305565b60405180910390fd5b6060821560008114611a805760405191506000825260208201604052611ad1565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611abe5780518352602083019250602081019050611aa1565b50868552601f19601f8301166040525050505b50809150509392505050565b6000606060008060008661ffff1667ffffffffffffffff811115611b0457611b03611fac565b5b6040519080825280601f01601f191660200182016040528015611b365781602001600182028036833780820191505090505b50905060008087516020890160008d8df191503d925086831115611b58578692505b828152826000602083013e81819450945050505094509492505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051611ba69190613356565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c8585858585604051611c1495949392919061336d565b60405180910390a15050505050565b6000600360008461ffff1661ffff16815260200190815260200160002054905060008103611c515761271090505b80821115611c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8b90613421565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b611cc481611cad565b8114611ccf57600080fd5b50565b600081359050611ce181611cbb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d0c57611d0b611ce7565b5b8235905067ffffffffffffffff811115611d2957611d28611cec565b5b602083019150836001820283011115611d4557611d44611cf1565b5b9250929050565b600067ffffffffffffffff82169050919050565b611d6981611d4c565b8114611d7457600080fd5b50565b600081359050611d8681611d60565b92915050565b60008060008060008060808789031215611da957611da8611ca3565b5b6000611db789828a01611cd2565b965050602087013567ffffffffffffffff811115611dd857611dd7611ca8565b5b611de489828a01611cf6565b95509550506040611df789828a01611d77565b935050606087013567ffffffffffffffff811115611e1857611e17611ca8565b5b611e2489828a01611cf6565b92509250509295509295509295565b600060208284031215611e4957611e48611ca3565b5b6000611e5784828501611cd2565b91505092915050565b6000819050919050565b611e7381611e60565b8114611e7e57600080fd5b50565b600081359050611e9081611e6a565b92915050565b60008060408385031215611ead57611eac611ca3565b5b6000611ebb85828601611cd2565b9250506020611ecc85828601611e81565b9150509250929050565b600080600060408486031215611eef57611eee611ca3565b5b6000611efd86828701611cd2565b935050602084013567ffffffffffffffff811115611f1e57611f1d611ca8565b5b611f2a86828701611cf6565b92509250509250925092565b60008115159050919050565b611f4b81611f36565b82525050565b6000602082019050611f666000830184611f42565b92915050565b611f7581611e60565b82525050565b6000602082019050611f906000830184611f6c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fe482611f9b565b810181811067ffffffffffffffff8211171561200357612002611fac565b5b80604052505050565b6000612016611c99565b90506120228282611fdb565b919050565b600067ffffffffffffffff82111561204257612041611fac565b5b61204b82611f9b565b9050602081019050919050565b82818337600083830152505050565b600061207a61207584612027565b61200c565b90508281526020810184848401111561209657612095611f96565b5b6120a1848285612058565b509392505050565b600082601f8301126120be576120bd611ce7565b5b81356120ce848260208601612067565b91505092915050565b6000806000606084860312156120f0576120ef611ca3565b5b60006120fe86828701611cd2565b935050602084013567ffffffffffffffff81111561211f5761211e611ca8565b5b61212b868287016120a9565b925050604061213c86828701611d77565b9150509250925092565b6000819050919050565b61215981612146565b82525050565b60006020820190506121746000830184612150565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121b4578082015181840152602081019050612199565b60008484015250505050565b60006121cb8261217a565b6121d58185612185565b93506121e5818560208601612196565b6121ee81611f9b565b840191505092915050565b6000602082019050818103600083015261221381846121c0565b905092915050565b6000806040838503121561223257612231611ca3565b5b600061224085828601611cd2565b925050602061225185828601611cd2565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122868261225b565b9050919050565b6122968161227b565b82525050565b60006020820190506122b1600083018461228d565b92915050565b6000819050919050565b60006122dc6122d76122d28461225b565b6122b7565b61225b565b9050919050565b60006122ee826122c1565b9050919050565b6000612300826122e3565b9050919050565b612310816122f5565b82525050565b600060208201905061232b6000830184612307565b92915050565b61233a8161227b565b811461234557600080fd5b50565b60008135905061235781612331565b92915050565b60006020828403121561237357612372611ca3565b5b600061238184828501612348565b91505092915050565b6000806000806000608086880312156123a6576123a5611ca3565b5b60006123b488828901611cd2565b95505060206123c588828901611cd2565b94505060406123d688828901611e81565b935050606086013567ffffffffffffffff8111156123f7576123f6611ca8565b5b61240388828901611cf6565b92509250509295509295909350565b60008060006060848603121561242b5761242a611ca3565b5b600061243986828701611cd2565b935050602061244a86828701611cd2565b925050604061245b86828701611e81565b9150509250925092565b6000806000806080858703121561247f5761247e611ca3565b5b600061248d87828801611cd2565b945050602061249e87828801611cd2565b93505060406124af87828801612348565b92505060606124c087828801611e81565b91505092959194509250565b600082825260208201905092915050565b7f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000600082015250565b6000612513601e836124cc565b915061251e826124dd565b602082019050919050565b6000602082019050818103600083015261254281612506565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061259057607f821691505b6020821081036125a3576125a2612549565b5b50919050565b600081905092915050565b60006125c083856125a9565b93506125cd838584612058565b82840190509392505050565b60006125e68284866125b4565b91508190509392505050565b7f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b600061264e6026836124cc565b9150612659826125f2565b604082019050919050565b6000602082019050818103600083015261267d81612641565b9050919050565b61268d81611cad565b82525050565b60006020820190506126a86000830184612684565b92915050565b60006126ba8385612185565b93506126c7838584612058565b6126d083611f9b565b840190509392505050565b60006040820190506126f06000830186612684565b81810360208301526127038184866126ae565b9050949350505050565b7f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201527f204c7a4170700000000000000000000000000000000000000000000000000000602082015250565b60006127696026836124cc565b91506127748261270d565b604082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000600082015250565b60006127d5601d836124cc565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061284582611e60565b915061285083611e60565b92508282039050818111156128685761286761280b565b5b92915050565b60008160601b9050919050565b60006128868261286e565b9050919050565b60006128988261287b565b9050919050565b6128b06128ab8261227b565b61288d565b82525050565b60006128c38285876125b4565b91506128cf828461289f565b601482019150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612905565b61294c8683612905565b95508019841693508086168417925050509392505050565b600061297f61297a61297584611e60565b6122b7565b611e60565b9050919050565b6000819050919050565b61299983612964565b6129ad6129a582612986565b848454612912565b825550505050565b600090565b6129c26129b5565b6129cd818484612990565b505050565b5b818110156129f1576129e66000826129ba565b6001810190506129d3565b5050565b601f821115612a3657612a07816128e0565b612a10846128f5565b81016020851015612a1f578190505b612a33612a2b856128f5565b8301826129d2565b50505b505050565b600082821c905092915050565b6000612a5960001984600802612a3b565b1980831691505092915050565b6000612a728383612a48565b9150826002028217905092915050565b612a8b8261217a565b67ffffffffffffffff811115612aa457612aa3611fac565b5b612aae8254612578565b612ab98282856129f5565b600060209050601f831160018114612aec5760008415612ada578287015190505b612ae48582612a66565b865550612b4c565b601f198416612afa866128e0565b60005b82811015612b2257848901518255600182019150602085019450602081019050612afd565b86831015612b3f5784890151612b3b601f891682612a48565b8355505b6001600288020188555050505b505050505050565b6000608082019050612b696000830188612684565b612b766020830187612684565b612b836040830186611f6c565b8181036060830152612b968184866126ae565b90509695505050505050565b7f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201527f6167650000000000000000000000000000000000000000000000000000000000602082015250565b6000612bfe6023836124cc565b9150612c0982612ba2565b604082019050919050565b60006020820190508181036000830152612c2d81612bf1565b9050919050565b7f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c906021836124cc565b9150612c9b82612c34565b604082019050919050565b60006020820190508181036000830152612cbf81612c83565b9050919050565b612ccf81611d4c565b82525050565b6000608082019050612cea6000830188612684565b8181036020830152612cfd8186886126ae565b9050612d0c6040830185612cc6565b612d196060830184612150565b9695505050505050565b7f4c7a4170703a20696e76616c6964206d696e4761730000000000000000000000600082015250565b6000612d596015836124cc565b9150612d6482612d23565b602082019050919050565b60006020820190508181036000830152612d8881612d4c565b9050919050565b6000606082019050612da46000830186612684565b612db16020830185612684565b612dbe6040830184611f6c565b949350505050565b600082905092915050565b612ddb8383612dc6565b67ffffffffffffffff811115612df457612df3611fac565b5b612dfe8254612578565b612e098282856129f5565b6000601f831160018114612e385760008415612e26578287013590505b612e308582612a66565b865550612e98565b601f198416612e46866128e0565b60005b82811015612e6e57848901358255600182019150602085019450602081019050612e49565b86831015612e8b5784890135612e87601f891682612a48565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612efd6026836124cc565b9150612f0882612ea1565b604082019050919050565b60006020820190508181036000830152612f2c81612ef0565b9050919050565b6000608082019050612f486000830187612684565b612f556020830186612684565b612f62604083018561228d565b612f6f6060830184611f6c565b95945050505050565b6000612f8b612f8684612027565b61200c565b905082815260208101848484011115612fa757612fa6611f96565b5b612fb2848285612196565b509392505050565b600082601f830112612fcf57612fce611ce7565b5b8151612fdf848260208601612f78565b91505092915050565b600060208284031215612ffe57612ffd611ca3565b5b600082015167ffffffffffffffff81111561301c5761301b611ca8565b5b61302884828501612fba565b91505092915050565b60006080820190506130466000830187612684565b818103602083015261305881866121c0565b90506130676040830185612cc6565b818103606083015261307981846121c0565b905095945050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130ba6020836124cc565b91506130c582613084565b602082019050919050565b600060208201905081810360008301526130e9816130ad565b9050919050565b60006130fb82611e60565b915061310683611e60565b925082820190508082111561311e5761311d61280b565b5b92915050565b7f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060008201527f61207472757374656420736f7572636500000000000000000000000000000000602082015250565b60006131806030836124cc565b915061318b82613124565b604082019050919050565b600060208201905081810360008301526131af81613173565b9050919050565b60006131c18261225b565b9050919050565b6131d1816131b6565b82525050565b600060c0820190506131ec6000830189612684565b81810360208301526131fe81886121c0565b9050818103604083015261321281876121c0565b905061322160608301866131c8565b61322e608083018561228d565b81810360a083015261324081846121c0565b9050979650505050505050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000613283600e836124cc565b915061328e8261324d565b602082019050919050565b600060208201905081810360008301526132b281613276565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b60006132ef6011836124cc565b91506132fa826132b9565b602082019050919050565b6000602082019050818103600083015261331e816132e2565b9050919050565b60006133308261217a565b61333a81856125a9565b935061334a818560208601612196565b80840191505092915050565b60006133628284613325565b915081905092915050565b600060a0820190506133826000830188612684565b818103602083015261339481876121c0565b90506133a36040830186612cc6565b81810360608301526133b581856121c0565b905081810360808301526133c981846121c0565b90509695505050505050565b7f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765600082015250565b600061340b6020836124cc565b9150613416826133d5565b602082019050919050565b6000602082019050818103600083015261343a816133fe565b905091905056fea26469706673582212205b7287942069abd10096c43aeffb19b007dd968e4fb13b40f88ab8cf4ee1d1cb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1417,
        "contract": "contracts/Counter.sol:Counter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1874,
        "contract": "contracts/Counter.sol:Counter",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1880,
        "contract": "contracts/Counter.sol:Counter",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 1884,
        "contract": "contracts/Counter.sol:Counter",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 1886,
        "contract": "contracts/Counter.sol:Counter",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1633,
        "contract": "contracts/Counter.sol:Counter",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1551,
        "contract": "contracts/Counter.sol:Counter",
        "label": "counter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}